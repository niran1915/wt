{"ast":null,"code":"var _jsxFileName = \"G:\\\\travel-buddy\\\\src\\\\Home.js\",\n  _s = $RefreshSig$();\n/* import React, { useState, useRef } from 'react';\r\nimport { GoogleMap, LoadScript, Autocomplete, DirectionsService, DirectionsRenderer } from '@react-google-maps/api';\r\nimport './Home.css';\r\n\r\nconst libraries = [\"places\"];\r\n\r\nconst Home = () => {\r\n  const [from, setFrom] = useState(null);\r\n  const [to, setTo] = useState(null);\r\n  const [directions, setDirections] = useState(null);\r\n  const [distance, setDistance] = useState('');\r\n  const [duration, setDuration] = useState('');\r\n  const [travelMode, setTravelMode] = useState('DRIVING'); \r\n\r\n  const fromRef = useRef(null);\r\n  const toRef = useRef(null);\r\n\r\n  const handlePlaceChange = (autocomplete, setter) => {\r\n    const place = autocomplete.getPlace();\r\n    setter(place);\r\n  };\r\n\r\n  const calculateRoute = () => {\r\n    if (from && to) {\r\n      const directionsService = new window.google.maps.DirectionsService();\r\n      directionsService.route(\r\n        {\r\n          origin: from.geometry.location,\r\n          destination: to.geometry.location,\r\n          travelMode: window.google.maps.TravelMode[travelMode],\r\n        },\r\n        (result, status) => {\r\n          if (status === window.google.maps.DirectionsStatus.OK) {\r\n            setDirections(result);\r\n            setDistance(result.routes[0].legs[0].distance.text);\r\n            setDuration(result.routes[0].legs[0].duration.text);\r\n          } else {\r\n            console.error(\"Error fetching directions\", result);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const swapLocations = () => {\r\n    const temp = from;\r\n    setFrom(to);\r\n    setTo(temp);\r\n  };\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey=\"YOUR_GOOGLE_MAPS_API_KEY\" libraries={libraries}>\r\n      <div className=\"home-container\">\r\n       \r\n        <div className=\"location-select\">\r\n          <Autocomplete\r\n            onLoad={(autocomplete) => (fromRef.current = autocomplete)}\r\n            onPlaceChanged={() => handlePlaceChange(fromRef.current, setFrom)}\r\n          >\r\n            <input type=\"text\" placeholder=\"From\" />\r\n          </Autocomplete>\r\n          \r\n          <button onClick={swapLocations}>â‡„</button>\r\n\r\n          <Autocomplete\r\n            onLoad={(autocomplete) => (toRef.current = autocomplete)}\r\n            onPlaceChanged={() => handlePlaceChange(toRef.current, setTo)}\r\n          >\r\n            <input type=\"text\" placeholder=\"To\" />\r\n          </Autocomplete>\r\n          \r\n          <button onClick={calculateRoute}>Get Route</button>\r\n        </div>\r\n\r\n       \r\n        <div className=\"travel-mode-select\">\r\n          <label htmlFor=\"travelMode\">Travel Mode: </label>\r\n          <select\r\n            id=\"travelMode\"\r\n            value={travelMode}\r\n            onChange={(e) => setTravelMode(e.target.value)}\r\n          >\r\n            <option value=\"DRIVING\">Driving</option>\r\n            <option value=\"WALKING\">Walking</option>\r\n            <option value=\"BICYCLING\">Bicycling</option>\r\n            <option value=\"TRANSIT\">Transit</option>\r\n          </select>\r\n        </div>\r\n\r\n       \r\n        <GoogleMap\r\n          center={{ lat: 37.7749, lng: -122.4194 }} // Default center\r\n          zoom={13}\r\n          mapContainerStyle={{ height: '400px', width: '100%' }}\r\n        >\r\n          {from && to && directions && (\r\n            <DirectionsRenderer directions={directions} />\r\n          )}\r\n        </GoogleMap>\r\n\r\n        \r\n        <div className=\"route-info\">\r\n          {distance && duration && (\r\n            <div>\r\n              <p>Distance: {distance}</p>\r\n              <p>Approximate Time: {duration}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default Home;   */\n\nimport React, { useState, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Polyline } from 'react-leaflet';\nimport axios from 'axios';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [from, setFrom] = useState(null);\n  const [to, setTo] = useState(null);\n  const [route, setRoute] = useState(null);\n  const [distance, setDistance] = useState('');\n  const [duration, setDuration] = useState('');\n  const [travelMode, setTravelMode] = useState('driving'); // Default travel mode\n  const [fromSuggestions, setFromSuggestions] = useState([]);\n  const [toSuggestions, setToSuggestions] = useState([]);\n  const fromRef = useRef(null);\n  const toRef = useRef(null);\n  const mapRef = useRef();\n\n  // Debounce function to limit API calls\n  const debounce = (func, delay) => {\n    let timeout;\n    return (...args) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        func(...args);\n      }, delay);\n    };\n  };\n  const fetchSuggestions = async (location, setter, setSuggestions) => {\n    if (location.length === 0) {\n      setSuggestions([]);\n      return;\n    }\n    const url = `https://opencagedata-geocoding.p.rapidapi.com/geocode/v1/json`;\n    try {\n      const response = await axios.get(url, {\n        headers: {\n          'X-RapidAPI-Key': RAPIDAPI_KEY_GEOCODING,\n          'X-RapidAPI-Host': 'opencagedata-geocoding.p.rapidapi.com'\n        },\n        params: {\n          q: location,\n          limit: 5\n        }\n      });\n      setSuggestions(response.data.results.map(place => ({\n        displayName: place.formatted,\n        position: {\n          lat: place.geometry.lat,\n          lng: place.geometry.lng\n        }\n      })));\n    } catch (error) {\n      console.error(\"Error fetching places:\", error);\n    }\n  };\n  const handlePlaceChange = debounce((location, setter, setSuggestions) => {\n    fetchSuggestions(location, setter, setSuggestions);\n  }, 300);\n  const selectSuggestion = (suggestion, setter, inputRef, setSuggestions) => {\n    setter(suggestion.position);\n    inputRef.current.value = suggestion.displayName;\n    setSuggestions([]);\n  };\n  const calculateRoute = async () => {\n    if (from && to) {\n      const url = `https://api.openrouteservice.org/v2/directions/${travelMode}`;\n      try {\n        const response = await axios.post(url, {\n          coordinates: [[from.lng, from.lat], [to.lng, to.lat]]\n        }, {\n          headers: {\n            'Authorization': RAPIDAPI_KEY_ROUTING,\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.data && response.data.routes.length > 0) {\n          const routeData = response.data.routes[0];\n          const geometry = routeData.geometry.coordinates.map(coord => ({\n            lat: coord[1],\n            lng: coord[0]\n          }));\n          setRoute(geometry);\n          setDistance((routeData.summary.distance / 1000).toFixed(2) + ' km'); // Convert meters to km\n          setDuration(Math.round(routeData.summary.duration / 60) + ' mins'); // Convert seconds to mins\n\n          const map = mapRef.current;\n          if (map) {\n            const bounds = L.latLngBounds(geometry);\n            map.fitBounds(bounds);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error calculating route:\", error);\n      }\n    }\n  };\n  const swapLocations = () => {\n    const temp = from;\n    setFrom(to);\n    setTo(temp);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-select\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"From\",\n          ref: fromRef,\n          onChange: e => handlePlaceChange(e.target.value, setFrom, setFromSuggestions)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), fromSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"suggestions-list\",\n          children: fromSuggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => selectSuggestion(suggestion, setFrom, fromRef, setFromSuggestions),\n            children: suggestion.displayName\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: swapLocations,\n        children: \"\\u21C4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"To\",\n          ref: toRef,\n          onChange: e => handlePlaceChange(e.target.value, setTo, setToSuggestions)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), toSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"suggestions-list\",\n          children: toSuggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => selectSuggestion(suggestion, setTo, toRef, setToSuggestions),\n            children: suggestion.displayName\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: calculateRoute,\n        children: \"Get Route\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"travel-mode-select\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"travelMode\",\n        children: \"Travel Mode: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"travelMode\",\n        value: travelMode,\n        onChange: e => setTravelMode(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"driving-car\",\n          children: \"Driving\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cycling-regular\",\n          children: \"Cycling\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"foot-walking\",\n          children: \"Walking\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: from || {\n        lat: 37.7749,\n        lng: -122.4194\n      },\n      zoom: 13,\n      ref: mapRef,\n      style: {\n        height: '400px',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), from && /*#__PURE__*/_jsxDEV(Marker, {\n        position: from,\n        icon: new L.Icon({\n          iconUrl: 'https://leafletjs.com/examples/custom-icons/leaf-red.png',\n          iconSize: [25, 41]\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 18\n      }, this), to && /*#__PURE__*/_jsxDEV(Marker, {\n        position: to,\n        icon: new L.Icon({\n          iconUrl: 'https://leafletjs.com/examples/custom-icons/leaf-green.png',\n          iconSize: [25, 41]\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 16\n      }, this), route && /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: route,\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"route-info\",\n      children: distance && duration ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Distance: \", distance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Approximate Time: \", duration]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please select start and end locations to calculate the route.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"rXkySFlM7Pm3bA28A3uOfgcP7V8=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useRef","MapContainer","TileLayer","Marker","Polyline","axios","L","jsxDEV","_jsxDEV","Home","_s","from","setFrom","to","setTo","route","setRoute","distance","setDistance","duration","setDuration","travelMode","setTravelMode","fromSuggestions","setFromSuggestions","toSuggestions","setToSuggestions","fromRef","toRef","mapRef","debounce","func","delay","timeout","args","clearTimeout","setTimeout","fetchSuggestions","location","setter","setSuggestions","length","url","response","get","headers","RAPIDAPI_KEY_GEOCODING","params","q","limit","data","results","map","place","displayName","formatted","position","lat","geometry","lng","error","console","handlePlaceChange","selectSuggestion","suggestion","inputRef","current","value","calculateRoute","post","coordinates","RAPIDAPI_KEY_ROUTING","routes","routeData","coord","summary","toFixed","Math","round","bounds","latLngBounds","fitBounds","swapLocations","temp","className","children","style","type","placeholder","ref","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","index","onClick","htmlFor","id","center","zoom","height","width","icon","Icon","iconUrl","iconSize","positions","color","_c","$RefreshReg$"],"sources":["G:/travel-buddy/src/Home.js"],"sourcesContent":["/* import React, { useState, useRef } from 'react';\r\nimport { GoogleMap, LoadScript, Autocomplete, DirectionsService, DirectionsRenderer } from '@react-google-maps/api';\r\nimport './Home.css';\r\n\r\nconst libraries = [\"places\"];\r\n\r\nconst Home = () => {\r\n  const [from, setFrom] = useState(null);\r\n  const [to, setTo] = useState(null);\r\n  const [directions, setDirections] = useState(null);\r\n  const [distance, setDistance] = useState('');\r\n  const [duration, setDuration] = useState('');\r\n  const [travelMode, setTravelMode] = useState('DRIVING'); \r\n\r\n  const fromRef = useRef(null);\r\n  const toRef = useRef(null);\r\n\r\n  const handlePlaceChange = (autocomplete, setter) => {\r\n    const place = autocomplete.getPlace();\r\n    setter(place);\r\n  };\r\n\r\n  const calculateRoute = () => {\r\n    if (from && to) {\r\n      const directionsService = new window.google.maps.DirectionsService();\r\n      directionsService.route(\r\n        {\r\n          origin: from.geometry.location,\r\n          destination: to.geometry.location,\r\n          travelMode: window.google.maps.TravelMode[travelMode],\r\n        },\r\n        (result, status) => {\r\n          if (status === window.google.maps.DirectionsStatus.OK) {\r\n            setDirections(result);\r\n            setDistance(result.routes[0].legs[0].distance.text);\r\n            setDuration(result.routes[0].legs[0].duration.text);\r\n          } else {\r\n            console.error(\"Error fetching directions\", result);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const swapLocations = () => {\r\n    const temp = from;\r\n    setFrom(to);\r\n    setTo(temp);\r\n  };\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey=\"YOUR_GOOGLE_MAPS_API_KEY\" libraries={libraries}>\r\n      <div className=\"home-container\">\r\n       \r\n        <div className=\"location-select\">\r\n          <Autocomplete\r\n            onLoad={(autocomplete) => (fromRef.current = autocomplete)}\r\n            onPlaceChanged={() => handlePlaceChange(fromRef.current, setFrom)}\r\n          >\r\n            <input type=\"text\" placeholder=\"From\" />\r\n          </Autocomplete>\r\n          \r\n          <button onClick={swapLocations}>â‡„</button>\r\n\r\n          <Autocomplete\r\n            onLoad={(autocomplete) => (toRef.current = autocomplete)}\r\n            onPlaceChanged={() => handlePlaceChange(toRef.current, setTo)}\r\n          >\r\n            <input type=\"text\" placeholder=\"To\" />\r\n          </Autocomplete>\r\n          \r\n          <button onClick={calculateRoute}>Get Route</button>\r\n        </div>\r\n\r\n       \r\n        <div className=\"travel-mode-select\">\r\n          <label htmlFor=\"travelMode\">Travel Mode: </label>\r\n          <select\r\n            id=\"travelMode\"\r\n            value={travelMode}\r\n            onChange={(e) => setTravelMode(e.target.value)}\r\n          >\r\n            <option value=\"DRIVING\">Driving</option>\r\n            <option value=\"WALKING\">Walking</option>\r\n            <option value=\"BICYCLING\">Bicycling</option>\r\n            <option value=\"TRANSIT\">Transit</option>\r\n          </select>\r\n        </div>\r\n\r\n       \r\n        <GoogleMap\r\n          center={{ lat: 37.7749, lng: -122.4194 }} // Default center\r\n          zoom={13}\r\n          mapContainerStyle={{ height: '400px', width: '100%' }}\r\n        >\r\n          {from && to && directions && (\r\n            <DirectionsRenderer directions={directions} />\r\n          )}\r\n        </GoogleMap>\r\n\r\n        \r\n        <div className=\"route-info\">\r\n          {distance && duration && (\r\n            <div>\r\n              <p>Distance: {distance}</p>\r\n              <p>Approximate Time: {duration}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default Home;   */\r\n\r\n\r\nimport React, { useState, useRef } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Polyline } from 'react-leaflet';\r\nimport axios from 'axios';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n  const [from, setFrom] = useState(null);\r\n  const [to, setTo] = useState(null);\r\n  const [route, setRoute] = useState(null);\r\n  const [distance, setDistance] = useState('');\r\n  const [duration, setDuration] = useState('');\r\n  const [travelMode, setTravelMode] = useState('driving'); // Default travel mode\r\n  const [fromSuggestions, setFromSuggestions] = useState([]);\r\n  const [toSuggestions, setToSuggestions] = useState([]);\r\n\r\n  const fromRef = useRef(null);\r\n  const toRef = useRef(null);\r\n  const mapRef = useRef();\r\n\r\n  // Debounce function to limit API calls\r\n  const debounce = (func, delay) => {\r\n    let timeout;\r\n    return (...args) => {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(() => {\r\n        func(...args);\r\n      }, delay);\r\n    };\r\n  };\r\n\r\n  \r\n  const fetchSuggestions = async (location, setter, setSuggestions) => {\r\n    if (location.length === 0) {\r\n      setSuggestions([]);\r\n      return;\r\n    }\r\n    const url = `https://opencagedata-geocoding.p.rapidapi.com/geocode/v1/json`;\r\n    try {\r\n      const response = await axios.get(url, {\r\n        headers: {\r\n          'X-RapidAPI-Key': RAPIDAPI_KEY_GEOCODING,\r\n          'X-RapidAPI-Host': 'opencagedata-geocoding.p.rapidapi.com',\r\n        },\r\n        params: { q: location, limit: 5 },\r\n      });\r\n      setSuggestions(response.data.results.map(place => ({\r\n        displayName: place.formatted,\r\n        position: { lat: place.geometry.lat, lng: place.geometry.lng },\r\n      })));\r\n    } catch (error) {\r\n      console.error(\"Error fetching places:\", error);\r\n    }\r\n  };\r\n\r\n  const handlePlaceChange = debounce((location, setter, setSuggestions) => {\r\n    fetchSuggestions(location, setter, setSuggestions);\r\n  }, 300);\r\n\r\n  const selectSuggestion = (suggestion, setter, inputRef, setSuggestions) => {\r\n    setter(suggestion.position);\r\n    inputRef.current.value = suggestion.displayName;\r\n    setSuggestions([]);\r\n  };\r\n\r\n  const calculateRoute = async () => {\r\n    if (from && to) {\r\n      const url = `https://api.openrouteservice.org/v2/directions/${travelMode}`;\r\n      try {\r\n        const response = await axios.post(\r\n          url,\r\n          {\r\n            coordinates: [[from.lng, from.lat], [to.lng, to.lat]],\r\n          },\r\n          {\r\n            headers: {\r\n              'Authorization': RAPIDAPI_KEY_ROUTING,\r\n              'Content-Type': 'application/json',\r\n            },\r\n          }\r\n        );\r\n        if (response.data && response.data.routes.length > 0) {\r\n          const routeData = response.data.routes[0];\r\n          const geometry = routeData.geometry.coordinates.map(coord => ({ lat: coord[1], lng: coord[0] }));\r\n          setRoute(geometry);\r\n          setDistance((routeData.summary.distance / 1000).toFixed(2) + ' km'); // Convert meters to km\r\n          setDuration(Math.round(routeData.summary.duration / 60) + ' mins'); // Convert seconds to mins\r\n\r\n          const map = mapRef.current;\r\n          if (map) {\r\n            const bounds = L.latLngBounds(geometry);\r\n            map.fitBounds(bounds);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error calculating route:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const swapLocations = () => {\r\n    const temp = from;\r\n    setFrom(to);\r\n    setTo(temp);\r\n  };\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      <div className=\"location-select\">\r\n        <div style={{ position: 'relative' }}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"From\"\r\n            ref={fromRef}\r\n            onChange={(e) => handlePlaceChange(e.target.value, setFrom, setFromSuggestions)}\r\n          />\r\n          {fromSuggestions.length > 0 && (\r\n            <ul className=\"suggestions-list\">\r\n              {fromSuggestions.map((suggestion, index) => (\r\n                <li key={index} onClick={() => selectSuggestion(suggestion, setFrom, fromRef, setFromSuggestions)}>\r\n                  {suggestion.displayName}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n\r\n        <button onClick={swapLocations}>â‡„</button>\r\n\r\n        <div style={{ position: 'relative' }}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"To\"\r\n            ref={toRef}\r\n            onChange={(e) => handlePlaceChange(e.target.value, setTo, setToSuggestions)}\r\n          />\r\n          {toSuggestions.length > 0 && (\r\n            <ul className=\"suggestions-list\">\r\n              {toSuggestions.map((suggestion, index) => (\r\n                <li key={index} onClick={() => selectSuggestion(suggestion, setTo, toRef, setToSuggestions)}>\r\n                  {suggestion.displayName}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n\r\n        <button onClick={calculateRoute}>Get Route</button>\r\n      </div>\r\n\r\n      <div className=\"travel-mode-select\">\r\n        <label htmlFor=\"travelMode\">Travel Mode: </label>\r\n        <select\r\n          id=\"travelMode\"\r\n          value={travelMode}\r\n          onChange={(e) => setTravelMode(e.target.value)}\r\n        >\r\n          <option value=\"driving-car\">Driving</option>\r\n          <option value=\"cycling-regular\">Cycling</option>\r\n          <option value=\"foot-walking\">Walking</option>\r\n        </select>\r\n      </div>\r\n\r\n      <MapContainer center={from || { lat: 37.7749, lng: -122.4194 }} zoom={13} ref={mapRef} style={{ height: '400px', width: '100%' }}>\r\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n        \r\n        {from && <Marker position={from} icon={new L.Icon({ iconUrl: 'https://leafletjs.com/examples/custom-icons/leaf-red.png', iconSize: [25, 41] })} />}\r\n        {to && <Marker position={to} icon={new L.Icon({ iconUrl: 'https://leafletjs.com/examples/custom-icons/leaf-green.png', iconSize: [25, 41] })} />}\r\n        \r\n        {route && <Polyline positions={route} color=\"blue\" />}\r\n      </MapContainer>\r\n\r\n      <div className=\"route-info\">\r\n        {distance && duration ? (\r\n          <div>\r\n            <p>Distance: {distance}</p>\r\n            <p>Approximate Time: {duration}</p>\r\n          </div>\r\n        ) : (\r\n          <p>Please select start and end locations to calculate the route.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}