{"ast":null,"code":"var _jsxFileName = \"G:\\\\travel-buddy\\\\src\\\\Home.js\",\n  _s = $RefreshSig$();\n/* import React, { useState, useRef } from 'react';\r\nimport { GoogleMap, LoadScript, Autocomplete, DirectionsService, DirectionsRenderer } from '@react-google-maps/api';\r\nimport './Home.css';\r\n\r\nconst libraries = [\"places\"];\r\n\r\nconst Home = () => {\r\n  const [from, setFrom] = useState(null);\r\n  const [to, setTo] = useState(null);\r\n  const [directions, setDirections] = useState(null);\r\n  const [distance, setDistance] = useState('');\r\n  const [duration, setDuration] = useState('');\r\n  const [travelMode, setTravelMode] = useState('DRIVING'); \r\n\r\n  const fromRef = useRef(null);\r\n  const toRef = useRef(null);\r\n\r\n  const handlePlaceChange = (autocomplete, setter) => {\r\n    const place = autocomplete.getPlace();\r\n    setter(place);\r\n  };\r\n\r\n  const calculateRoute = () => {\r\n    if (from && to) {\r\n      const directionsService = new window.google.maps.DirectionsService();\r\n      directionsService.route(\r\n        {\r\n          origin: from.geometry.location,\r\n          destination: to.geometry.location,\r\n          travelMode: window.google.maps.TravelMode[travelMode],\r\n        },\r\n        (result, status) => {\r\n          if (status === window.google.maps.DirectionsStatus.OK) {\r\n            setDirections(result);\r\n            setDistance(result.routes[0].legs[0].distance.text);\r\n            setDuration(result.routes[0].legs[0].duration.text);\r\n          } else {\r\n            console.error(\"Error fetching directions\", result);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const swapLocations = () => {\r\n    const temp = from;\r\n    setFrom(to);\r\n    setTo(temp);\r\n  };\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey=\"YOUR_GOOGLE_MAPS_API_KEY\" libraries={libraries}>\r\n      <div className=\"home-container\">\r\n       \r\n        <div className=\"location-select\">\r\n          <Autocomplete\r\n            onLoad={(autocomplete) => (fromRef.current = autocomplete)}\r\n            onPlaceChanged={() => handlePlaceChange(fromRef.current, setFrom)}\r\n          >\r\n            <input type=\"text\" placeholder=\"From\" />\r\n          </Autocomplete>\r\n          \r\n          <button onClick={swapLocations}>â‡„</button>\r\n\r\n          <Autocomplete\r\n            onLoad={(autocomplete) => (toRef.current = autocomplete)}\r\n            onPlaceChanged={() => handlePlaceChange(toRef.current, setTo)}\r\n          >\r\n            <input type=\"text\" placeholder=\"To\" />\r\n          </Autocomplete>\r\n          \r\n          <button onClick={calculateRoute}>Get Route</button>\r\n        </div>\r\n\r\n       \r\n        <div className=\"travel-mode-select\">\r\n          <label htmlFor=\"travelMode\">Travel Mode: </label>\r\n          <select\r\n            id=\"travelMode\"\r\n            value={travelMode}\r\n            onChange={(e) => setTravelMode(e.target.value)}\r\n          >\r\n            <option value=\"DRIVING\">Driving</option>\r\n            <option value=\"WALKING\">Walking</option>\r\n            <option value=\"BICYCLING\">Bicycling</option>\r\n            <option value=\"TRANSIT\">Transit</option>\r\n          </select>\r\n        </div>\r\n\r\n       \r\n        <GoogleMap\r\n          center={{ lat: 37.7749, lng: -122.4194 }} // Default center\r\n          zoom={13}\r\n          mapContainerStyle={{ height: '400px', width: '100%' }}\r\n        >\r\n          {from && to && directions && (\r\n            <DirectionsRenderer directions={directions} />\r\n          )}\r\n        </GoogleMap>\r\n\r\n        \r\n        <div className=\"route-info\">\r\n          {distance && duration && (\r\n            <div>\r\n              <p>Distance: {distance}</p>\r\n              <p>Approximate Time: {duration}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default Home;   */\n\nimport React, { useState, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Polyline } from 'react-leaflet';\nimport axios from 'axios';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [from, setFrom] = useState(null);\n  const [to, setTo] = useState(null);\n  const [route, setRoute] = useState(null);\n  const [distance, setDistance] = useState('');\n  const [duration, setDuration] = useState('');\n  const [travelMode, setTravelMode] = useState('driving-car'); // Default travel mode\n  const [fromSuggestions, setFromSuggestions] = useState([]);\n  const [toSuggestions, setToSuggestions] = useState([]);\n  const fromRef = useRef(null);\n  const toRef = useRef(null);\n  const handlePlaceChange = async (location, setter, setSuggestions) => {\n    if (location.length === 0) {\n      setSuggestions([]);\n      return;\n    }\n    const url = `https://cors-anywhere.herokuapp.com/https://nominatim.openstreetmap.org/search?format=json&q=${location}`;\n    try {\n      const response = await axios.get(url);\n      setSuggestions(response.data.map(place => ({\n        displayName: place.display_name,\n        position: {\n          lat: parseFloat(place.lat),\n          lng: parseFloat(place.lon)\n        }\n      })));\n      if (response.data.length > 0) {\n        const place = response.data[0];\n        const position = {\n          lat: parseFloat(place.lat),\n          lng: parseFloat(place.lon)\n        };\n        setter(position);\n      }\n    } catch (error) {\n      console.error(\"Error fetching places:\", error);\n    }\n  };\n  const calculateRoute = async () => {\n    if (from && to) {\n      const url = `https://api.openrouteservice.org/v2/directions/${travelMode}`;\n      try {\n        const response = await axios.post(url, {\n          coordinates: [[from.lng, from.lat], [to.lng, to.lat]]\n        }, {\n          headers: {\n            'Authorization': 'YOUR_API_KEY',\n            // Replace with your actual API key\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.data && response.data.routes.length > 0) {\n          const routeData = response.data.routes[0];\n          const geometry = routeData.geometry.coordinates.map(coord => ({\n            lat: coord[1],\n            lng: coord[0]\n          }));\n          setRoute(geometry);\n          setDistance((routeData.summary.distance / 1000).toFixed(2) + ' km'); // Convert meters to km\n          setDuration(Math.round(routeData.summary.duration / 60) + ' mins'); // Convert seconds to mins\n        }\n      } catch (error) {\n        console.error(\"Error calculating route:\", error);\n      }\n    }\n  };\n  const swapLocations = () => {\n    const temp = from;\n    setFrom(to);\n    setTo(temp);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"location-select\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"From\",\n          ref: fromRef,\n          onBlur: () => handlePlaceChange(fromRef.current.value, setFrom, setFromSuggestions),\n          onChange: e => handlePlaceChange(e.target.value, setFrom, setFromSuggestions)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), fromSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"suggestions-list\",\n          children: fromSuggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setFrom(suggestion.position);\n              fromRef.current.value = suggestion.displayName;\n              setFromSuggestions([]);\n            },\n            children: suggestion.displayName\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: swapLocations,\n        children: \"\\u21C4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"To\",\n          ref: toRef,\n          onBlur: () => handlePlaceChange(toRef.current.value, setTo, setToSuggestions),\n          onChange: e => handlePlaceChange(e.target.value, setTo, setToSuggestions)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), toSuggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"suggestions-list\",\n          children: toSuggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTo(suggestion.position);\n              toRef.current.value = suggestion.displayName;\n              setToSuggestions([]);\n            },\n            children: suggestion.displayName\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: calculateRoute,\n        children: \"Get Route\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"travel-mode-select\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"travelMode\",\n        children: \"Travel Mode: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"travelMode\",\n        value: travelMode,\n        onChange: e => setTravelMode(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"driving-car\",\n          children: \"Driving\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cycling-regular\",\n          children: \"Cycling\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"foot-walking\",\n          children: \"Walking\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: from || {\n        lat: 37.7749,\n        lng: -122.4194\n      },\n      zoom: 13,\n      style: {\n        height: '400px',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), from && /*#__PURE__*/_jsxDEV(Marker, {\n        position: from,\n        icon: new L.Icon({\n          iconUrl: 'https://leafletjs.com/examples/custom-icons/leaf-red.png',\n          iconSize: [25, 41]\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 18\n      }, this), to && /*#__PURE__*/_jsxDEV(Marker, {\n        position: to,\n        icon: new L.Icon({\n          iconUrl: 'https://leafletjs.com/examples/custom-icons/leaf-green.png',\n          iconSize: [25, 41]\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 16\n      }, this), route && /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: route,\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"route-info\",\n      children: distance && duration && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Distance: \", distance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Approximate Time: \", duration]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"YFjVWhSiz9rz2Wng1rRDToeRT+c=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useRef","MapContainer","TileLayer","Marker","Polyline","axios","L","jsxDEV","_jsxDEV","Home","_s","from","setFrom","to","setTo","route","setRoute","distance","setDistance","duration","setDuration","travelMode","setTravelMode","fromSuggestions","setFromSuggestions","toSuggestions","setToSuggestions","fromRef","toRef","handlePlaceChange","location","setter","setSuggestions","length","url","response","get","data","map","place","displayName","display_name","position","lat","parseFloat","lng","lon","error","console","calculateRoute","post","coordinates","headers","routes","routeData","geometry","coord","summary","toFixed","Math","round","swapLocations","temp","className","children","style","type","placeholder","ref","onBlur","current","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","suggestion","index","onClick","htmlFor","id","center","zoom","height","width","icon","Icon","iconUrl","iconSize","positions","color","_c","$RefreshReg$"],"sources":["G:/travel-buddy/src/Home.js"],"sourcesContent":["/* import React, { useState, useRef } from 'react';\r\nimport { GoogleMap, LoadScript, Autocomplete, DirectionsService, DirectionsRenderer } from '@react-google-maps/api';\r\nimport './Home.css';\r\n\r\nconst libraries = [\"places\"];\r\n\r\nconst Home = () => {\r\n  const [from, setFrom] = useState(null);\r\n  const [to, setTo] = useState(null);\r\n  const [directions, setDirections] = useState(null);\r\n  const [distance, setDistance] = useState('');\r\n  const [duration, setDuration] = useState('');\r\n  const [travelMode, setTravelMode] = useState('DRIVING'); \r\n\r\n  const fromRef = useRef(null);\r\n  const toRef = useRef(null);\r\n\r\n  const handlePlaceChange = (autocomplete, setter) => {\r\n    const place = autocomplete.getPlace();\r\n    setter(place);\r\n  };\r\n\r\n  const calculateRoute = () => {\r\n    if (from && to) {\r\n      const directionsService = new window.google.maps.DirectionsService();\r\n      directionsService.route(\r\n        {\r\n          origin: from.geometry.location,\r\n          destination: to.geometry.location,\r\n          travelMode: window.google.maps.TravelMode[travelMode],\r\n        },\r\n        (result, status) => {\r\n          if (status === window.google.maps.DirectionsStatus.OK) {\r\n            setDirections(result);\r\n            setDistance(result.routes[0].legs[0].distance.text);\r\n            setDuration(result.routes[0].legs[0].duration.text);\r\n          } else {\r\n            console.error(\"Error fetching directions\", result);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const swapLocations = () => {\r\n    const temp = from;\r\n    setFrom(to);\r\n    setTo(temp);\r\n  };\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey=\"YOUR_GOOGLE_MAPS_API_KEY\" libraries={libraries}>\r\n      <div className=\"home-container\">\r\n       \r\n        <div className=\"location-select\">\r\n          <Autocomplete\r\n            onLoad={(autocomplete) => (fromRef.current = autocomplete)}\r\n            onPlaceChanged={() => handlePlaceChange(fromRef.current, setFrom)}\r\n          >\r\n            <input type=\"text\" placeholder=\"From\" />\r\n          </Autocomplete>\r\n          \r\n          <button onClick={swapLocations}>â‡„</button>\r\n\r\n          <Autocomplete\r\n            onLoad={(autocomplete) => (toRef.current = autocomplete)}\r\n            onPlaceChanged={() => handlePlaceChange(toRef.current, setTo)}\r\n          >\r\n            <input type=\"text\" placeholder=\"To\" />\r\n          </Autocomplete>\r\n          \r\n          <button onClick={calculateRoute}>Get Route</button>\r\n        </div>\r\n\r\n       \r\n        <div className=\"travel-mode-select\">\r\n          <label htmlFor=\"travelMode\">Travel Mode: </label>\r\n          <select\r\n            id=\"travelMode\"\r\n            value={travelMode}\r\n            onChange={(e) => setTravelMode(e.target.value)}\r\n          >\r\n            <option value=\"DRIVING\">Driving</option>\r\n            <option value=\"WALKING\">Walking</option>\r\n            <option value=\"BICYCLING\">Bicycling</option>\r\n            <option value=\"TRANSIT\">Transit</option>\r\n          </select>\r\n        </div>\r\n\r\n       \r\n        <GoogleMap\r\n          center={{ lat: 37.7749, lng: -122.4194 }} // Default center\r\n          zoom={13}\r\n          mapContainerStyle={{ height: '400px', width: '100%' }}\r\n        >\r\n          {from && to && directions && (\r\n            <DirectionsRenderer directions={directions} />\r\n          )}\r\n        </GoogleMap>\r\n\r\n        \r\n        <div className=\"route-info\">\r\n          {distance && duration && (\r\n            <div>\r\n              <p>Distance: {distance}</p>\r\n              <p>Approximate Time: {duration}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default Home;   */\r\n\r\n\r\nimport React, { useState, useRef } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Polyline } from 'react-leaflet';\r\nimport axios from 'axios';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n  const [from, setFrom] = useState(null);\r\n  const [to, setTo] = useState(null);\r\n  const [route, setRoute] = useState(null);\r\n  const [distance, setDistance] = useState('');\r\n  const [duration, setDuration] = useState('');\r\n  const [travelMode, setTravelMode] = useState('driving-car'); // Default travel mode\r\n  const [fromSuggestions, setFromSuggestions] = useState([]);\r\n  const [toSuggestions, setToSuggestions] = useState([]);\r\n\r\n  const fromRef = useRef(null);\r\n  const toRef = useRef(null);\r\n\r\n  const handlePlaceChange = async (location, setter, setSuggestions) => {\r\n    if (location.length === 0) {\r\n      setSuggestions([]);\r\n      return;\r\n    }\r\n    const url = `https://cors-anywhere.herokuapp.com/https://nominatim.openstreetmap.org/search?format=json&q=${location}`;\r\n    try {\r\n      const response = await axios.get(url);\r\n      setSuggestions(response.data.map(place => ({\r\n        displayName: place.display_name,\r\n        position: { lat: parseFloat(place.lat), lng: parseFloat(place.lon) },\r\n      })));\r\n      if (response.data.length > 0) {\r\n        const place = response.data[0];\r\n        const position = { lat: parseFloat(place.lat), lng: parseFloat(place.lon) };\r\n        setter(position);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching places:\", error);\r\n    }\r\n  };\r\n\r\n  const calculateRoute = async () => {\r\n    if (from && to) {\r\n      const url = `https://api.openrouteservice.org/v2/directions/${travelMode}`;\r\n      try {\r\n        const response = await axios.post(\r\n          url,\r\n          {\r\n            coordinates: [[from.lng, from.lat], [to.lng, to.lat]],\r\n          },\r\n          {\r\n            headers: {\r\n              'Authorization': 'YOUR_API_KEY', // Replace with your actual API key\r\n              'Content-Type': 'application/json',\r\n            },\r\n          }\r\n        );\r\n        if (response.data && response.data.routes.length > 0) {\r\n          const routeData = response.data.routes[0];\r\n          const geometry = routeData.geometry.coordinates.map(coord => ({ lat: coord[1], lng: coord[0] }));\r\n          setRoute(geometry);\r\n          setDistance((routeData.summary.distance / 1000).toFixed(2) + ' km'); // Convert meters to km\r\n          setDuration(Math.round(routeData.summary.duration / 60) + ' mins'); // Convert seconds to mins\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error calculating route:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const swapLocations = () => {\r\n    const temp = from;\r\n    setFrom(to);\r\n    setTo(temp);\r\n  };\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      {/* Location Input Section */}\r\n      <div className=\"location-select\">\r\n        <div style={{ position: 'relative' }}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"From\"\r\n            ref={fromRef}\r\n            onBlur={() => handlePlaceChange(fromRef.current.value, setFrom, setFromSuggestions)}\r\n            onChange={(e) => handlePlaceChange(e.target.value, setFrom, setFromSuggestions)}\r\n          />\r\n          {fromSuggestions.length > 0 && (\r\n            <ul className=\"suggestions-list\">\r\n              {fromSuggestions.map((suggestion, index) => (\r\n                <li key={index} onClick={() => {\r\n                  setFrom(suggestion.position);\r\n                  fromRef.current.value = suggestion.displayName;\r\n                  setFromSuggestions([]);\r\n                }}>\r\n                  {suggestion.displayName}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n        \r\n        <button onClick={swapLocations}>â‡„</button>\r\n\r\n        <div style={{ position: 'relative' }}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"To\"\r\n            ref={toRef}\r\n            onBlur={() => handlePlaceChange(toRef.current.value, setTo, setToSuggestions)}\r\n            onChange={(e) => handlePlaceChange(e.target.value, setTo, setToSuggestions)}\r\n          />\r\n          {toSuggestions.length > 0 && (\r\n            <ul className=\"suggestions-list\">\r\n              {toSuggestions.map((suggestion, index) => (\r\n                <li key={index} onClick={() => {\r\n                  setTo(suggestion.position);\r\n                  toRef.current.value = suggestion.displayName;\r\n                  setToSuggestions([]);\r\n                }}>\r\n                  {suggestion.displayName}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n        \r\n        <button onClick={calculateRoute}>Get Route</button>\r\n      </div>\r\n\r\n      {/* Travel Mode Selection */}\r\n      <div className=\"travel-mode-select\">\r\n        <label htmlFor=\"travelMode\">Travel Mode: </label>\r\n        <select\r\n          id=\"travelMode\"\r\n          value={travelMode}\r\n          onChange={(e) => setTravelMode(e.target.value)}\r\n        >\r\n          <option value=\"driving-car\">Driving</option>\r\n          <option value=\"cycling-regular\">Cycling</option>\r\n          <option value=\"foot-walking\">Walking</option>\r\n        </select>\r\n      </div>\r\n\r\n      {/* Map Display */}\r\n      <MapContainer center={from || { lat: 37.7749, lng: -122.4194 }} zoom={13} style={{ height: '400px', width: '100%' }}>\r\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n        \r\n        {from && <Marker position={from} icon={new L.Icon({ iconUrl: 'https://leafletjs.com/examples/custom-icons/leaf-red.png', iconSize: [25, 41] })} />}\r\n        {to && <Marker position={to} icon={new L.Icon({ iconUrl: 'https://leafletjs.com/examples/custom-icons/leaf-green.png', iconSize: [25, 41] })} />}\r\n        \r\n        {route && <Polyline positions={route} color=\"blue\" />}\r\n      </MapContainer>\r\n\r\n      {/* Distance and Duration Info */}\r\n      <div className=\"route-info\">\r\n        {distance && duration && (\r\n          <div>\r\n            <p>Distance: {distance}</p>\r\n            <p>Approximate Time: {duration}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}